<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.vainglory.mapper.IMemberDao">
    <!--为当前Mapper开启二级缓存，整个Mapper中的sql都会放进二级缓存-->
    <!--<cache/>-->
    <!--autoMapping属性自动映射POJO属性和数据库表中同名的字段-->
    <resultMap type="com.vainglory.domain.Member" id="resultMapMember" autoMapping="true">
        <id  property="id" column="uid"/>
        <collection property="addresses"  ofType="Address" autoMapping="true">
            <id property="id" column="aid"/>
        </collection>
    </resultMap>

    <resultMap id="resultMember" type="com.vainglory.domain.Member" autoMapping="true">
        <id property="id" column="uid"/>
        <collection property="addresses" column="uid" select="com.vainglory.mapper.IAddressDao.findByUid" fetchType="lazy"/>
    </resultMap>

    <!-- 一对多关联查询-->
    <select id="findByUidAndAid" resultMap="resultMapMember" parameterType="int">
        select tb_member.id as uid,name,gender,phone,email,
                tb_address.id as aid ,country,province,city from tb_member join tb_address on tb_member.id=tb_address.uid where tb_member.id=#{id};
    </select>
    <!--延迟加载-->
    <select id="findByUid" resultMap="resultMember" parameterType="int">
        select tb_member.id as uid,name,gender,phone,email
        from tb_member where id=#{id};
    </select>


</mapper>