一、

Mybatis重要API
- SqlSessionFactoryBuilder：该对象负责根据MyBatis配置文件SqlMapConfig.xml构建SqlSessionFactory实例
- SqlSessionFactory：每一个MyBatis的应用程序都以一个SqlSessionFactory对象为核心。该对象负责创建SqlSession对象实例。
- SqlSession：该对象包含了所有执行SQL操作的方法，用于执行已映射的SQL语句

参数为一个基本数据类型时，mapper中不需要使用parameterType，sql语句中的占位符可以是任意名称

Mapper中#占位符，相当于？，实现prepareStatement，防止sql注入攻击
还可以使用$，相当于字符串拼接，参数名只能是${value},会有sql注入攻击漏洞
使用#用于传递数据，使用$用于拼接sql语句，例如表中的字段名

二、Mybatis的三种开发方式

第一种：原始方法，编写Dao层的实现层，读取Mapper文件，执行sql语句

第二种：Mapper接口动态代理，不编写实现类，使用SqlSession的getMapper方法，获取代理对象，执行SQL语句。

第三种：注解式开发


三：输入输出参数

parameterType()：
参数类型，

resultType()：
resultType可以指定将查询结果映射为pojo，但需要pojo的属性名和sql查询的列名一致方可映射成功。

resultMap()：

起别名，select id as user_id from tb_user;（最简单的方式）

如果sql查询字段名和pojo的属性名不一致，可以通过resultMap将字段名和属性名作一个对应关系 ，
resultMap实质上还需要将查询结果映射到pojo对象中。
resultMap可以实现将查询结果映射为复杂类型的pojo，
比如在查询结果映射对象中包括pojo和list实现一对一查询和一对多查询。

例如：
<resultMap type="Worker" id="resultMapWorker">
    <id column="id" property="id"/>
    <result column="name" property="name"/>
    <result column="salary" property="salary"/>
    <result column="address" property="address"/>
</resultMap>
此时SQL标签上的结果集类型应该使用resultMap

传递多个参数查询:
findByNameAndGender(String name,Integer gender);
select * from tb_user where name like #{param1} and gender=#{param2}（常规）
select * from tb_user where name like #{args1} and gender=#{args2}（不常用）
封装一个queryVo类，传递多个参数

resultMap实现一对多关联查询
SELECT o.*,u.username,u.email,u.address FROM
orders o LEFT JOIN user u
ON o.user_id = u.id

类型转换器：
public class AddressHandler extends TypeHandler{}

四、动态SQL（重点）

通过mybatis提供的各种标签方法实现动态拼接sql。
（1）If标签：<if></if>
字符串雷翔的数据需要做不等于空字符串的校验。
if标签前需要添加一个 where 1=1 语句，防止语法错误。

（2）Where标签：<where></where>
where标签可以自动添加where语句，同时处理(即去掉)SQL语句第一个and、or关键字，否则会出现以下情况：
select * from tb_user and sex=""...(多一个and关键字，出现语法错误)

（3）sql标签：<sql>
Mybatis中可将重复的sql提取出来，使用时用include引用即可，最终达到sql重用的目的。
使用sql标签声明sql片段：
<sql id="userFields">
	id, username, birthday, sex, address
</sql>

（4）foreach标签<foreach></foreach>
属性：
foreach标签，进行遍历 -->
collection：遍历的集合，这里是QueryVo的ids属性
item：遍历的项目，可以随便写，，但是和后面的#{}里面要一致
open：在前面添加的sql片段
close：在结尾处添加的sql片段
separator：指定遍历的元素之间使用的分隔符
index：collection指定集合元素的索引

五、多表关联查询

六、代码生成器
