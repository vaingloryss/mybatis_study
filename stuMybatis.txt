一、Mybatis
二、Mybatis的三种开发方式
三：输入输出参数
四、动态SQL（重点）
五、多表关联查询
六、代码生成器
七、分页插件

一、Mybatis重要API
- SqlSessionFactoryBuilder：该对象负责根据MyBatis配置文件SqlMapConfig.xml构建SqlSessionFactory实例
- SqlSessionFactory：每一个MyBatis的应用程序都以一个SqlSessionFactory对象为核心。该对象负责创建SqlSession对象实例。
- SqlSession：该对象包含了所有执行SQL操作的方法，用于执行已映射的SQL语句

参数为一个基本数据类型时，mapper中不需要使用parameterType，sql语句中的占位符可以是任意名称

Mapper中#占位符，相当于？，实现prepareStatement，防止sql注入攻击
还可以使用$，相当于字符串拼接，参数名只能是${value},会有sql注入攻击漏洞
使用#用于传递数据，使用$用于拼接sql语句，例如表中的字段名

二、Mybatis的三种开发方式

第一种：原始方法，编写Dao层的实现层，读取Mapper文件，执行sql语句

第二种：Mapper接口动态代理，不编写实现类，使用SqlSession的getMapper方法，获取代理对象，执行SQL语句。（推荐）

第三种：注解式开发，再Dao接口的方法上，使用注解进行sql语句的绑定。（不推荐，开发方式不够灵活，sql语句与应用程序没有解耦）


三：输入输出参数

parameterType()：
参数类型，

resultType()：
resultType可以指定将查询结果映射为pojo，但需要pojo的属性名和sql查询的列名一致方可映射成功。

resultMap()：

起别名，select id as user_id from tb_user;（最简单的方式）

如果sql查询字段名和pojo的属性名不一致，可以通过resultMap将字段名和属性名作一个对应关系 ，
resultMap实质上还需要将查询结果映射到pojo对象中。
resultMap可以实现将查询结果映射为复杂类型的pojo，
比如在查询结果映射对象中包括pojo和list实现一对一查询和一对多查询。

例如：
<resultMap type="Worker" id="resultMapWorker">
    <id column="id" property="id"/>
    <result column="name" property="name"/>
    <result column="salary" property="salary"/>
    <result column="address" property="address"/>
</resultMap>
此时SQL标签上的结果集类型应该使用resultMap

传递多个参数查询:
findByNameAndGender(String name,Integer gender);
select * from tb_user where name like #{param1} and gender=#{param2}（常规）
select * from tb_user where name like #{args1} and gender=#{args2}（不常用）
封装一个queryVo类，传递多个参数

resultMap实现一对多关联查询
SELECT o.*,u.username,u.email,u.address FROM
orders o LEFT JOIN user u
ON o.user_id = u.id

类型转换器：
public class AddressHandler extends TypeHandler{}

四、动态SQL（重点）

通过mybatis提供的各种标签方法实现动态拼接sql。
（1）If标签：<if></if>
字符串雷翔的数据需要做不等于空字符串的校验。
if标签前需要添加一个 where 1=1 语句，防止语法错误。

（2）Where标签：<where></where>
where标签可以自动添加where语句，同时处理(即去掉)SQL语句第一个and、or关键字，否则会出现以下情况：
select * from tb_user and sex=""...(多一个and关键字，出现语法错误)

（3）sql标签：<sql>
Mybatis中可将重复的sql提取出来，使用时用include引用即可，最终达到sql重用的目的。
使用sql标签声明sql片段：
<sql id="userFields">
	id, username, birthday, sex, address
</sql>

（4）foreach标签<foreach></foreach>
属性：
foreach标签，进行遍历 -->
collection：遍历的集合，这里是QueryVo的ids属性
item：遍历的项目，可以随便写，，但是和后面的#{}里面要一致
open：在前面添加的sql片段
close：在结尾处添加的sql片段
separator：指定遍历的元素之间使用的分隔符
index：collection指定集合元素的索引

五、多表关联查询

六、代码生成器
Generator



ResultMap中的属性autoMapping，自动将数据库与POJO属性同名的字段对应。
id属性用来区分对象
自动映射需要至少写出一列，一般是id（非强制），为什么不知道，源码，官方文档没有明确指出

七、延迟加载
延迟加载：不会立即查询，而是实际使用数据时再查询

association 和 collection 都是在加载关系对方的数据，但在查询一方时，不一定需要另一方数据，
此时可以利用延迟加载特性 做出适应。


八、分页插件 pagehelper
设置分页条件后的第一条查询SQL语句会被增强。
使用步骤：
第一步：导入依赖
<dependency>
  <groupId>com.github.pagehelper</groupId>
  <artifactId>pagehelper</artifactId>
  <version>RELEASE</version>
</dependency>
第二步：在mybatisConfig配置文件中配置分页插件
<plugins>
  <!-- com.github.pagehelper为PageHelper类所在包名 -->
  <plugin interceptor="com.github.pagehelper.PageInterceptor">
      <!-- 页号自动回归到合理数值 -->
      <property name="reasonable" value="true"/>
  </plugin>
</plugins>
注意：
plugins在配置文件中的位置必须符合要求，否则会报错，顺序如下:
properties?, settings?,
typeAliases?, typeHandlers?,
objectFactory?,objectWrapperFactory?,
plugins?,
environments?, databaseIdProvider?, mappers?

spring 等价配置
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  <property name="plugins">
    <array>
      <bean class="com.github.pagehelper.PageInterceptor"></bean>
    </array>
  </property>
</bean>

第三步：在查询语句执行前设置分页，增强sql语句
PageHelper.startPage(2,3);// 第2页，每页3条数据,pageNum,pageSize
PageHelper.orderBy("id desc");//可以选择设置排序（可选）
//包装一个PageInfo，其中会持有所有分页会用到的信息：当前页号，每页多少条，共多少页，是否为第一页/最后一页，是否有下一页等。
PageInfo<User> pageInfo=new PageInfo<User>(users);

注意：
startPage()相当于一个拦截器，用于增强查询语句（添加limit），所以Mapper文件中的sql语句最后不要写分号。
每次只对startPage()方法后的第一个查询语句进行增强








九、缓存
缓存：将数据库的数据临时的存储起来，以更好的支持查询。
减少和数据库通信的次数，从而提高查询效率。
适合进缓存的数据：查询频繁而修改较少的数据。

一个SqlSession对应一个请求。

Mybatis支持两种缓存：

一级缓存：（使用局限，实用价值不大）
存储位置：SqlSession，
即一个SqlSession对象发起查询后，查询结果会存在自己内部。
有效范围：同一个SqlSession的多次查询，即同一个SqlSession的多次相同sql的查询可以使用一级缓存。
开启：Mybatis一级缓存默认开启
清除：sqlSession.clearCache();

二级缓存：
存储位置：sqlSessionFactory；
即同一个SqlSessionFactory创建的所有SqlSession发起的查询，查询结果都会再SqlSessionFactory内部。
有效范围：同一个SqlSessionFactory
开启：默认开启，但需要指定哪个DAO的Mapper需要使用二级缓存，定义一个<cache>即可
注意：二级缓存必须再sqlSession.commit()或sqlSession.close()之后才生效
清除：sqlSession.rollback();//查询结果不进入缓存

注意：查询结果对应的Pojo类需要实现serializable接口

二级缓存的存储结构
一个Map集合
key：namespace(命名空间)
value：PerpetualCache(默认的缓存实现)

PerpetualCache中也有一个Map集合
key：slq语句
value：查询结果

在对数据库进行增删改时，二级缓存会更新即清空。
如果使用延迟加载做关联查询，更新其中一张表时，另一张表的缓存不会更新，这就带来了问题，可能读到脏数据。
解决：cache-ref
当前缓存数据存入cache-ref指定的缓存分区，即将两个namespace的缓存数据存入一个分区。


